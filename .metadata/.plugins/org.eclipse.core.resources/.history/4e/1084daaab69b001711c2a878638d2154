package music;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Arrays;

//import music.MusicServiceStub.ArtistInfo;

public class MusicService extends MusicServiceSkeleton {
	
	private final static String databaseHost = "jdbc:mysql://localhost:3306/ng_music";
	private final static String databaseName = "ng_music";
	private final static String databasePassword = "lf56yWb58v";
	private final static String databaseUser = "Chris";
	//private final static String discTable = "music";
	
public static void main(String[] args) throws ErrorFaultException{
		
		MusicService service = new MusicService();
		
		service.go();
		
	}
	
	public void go() throws ErrorFaultException{
		
		AlbumName album = new AlbumName();
		
		album.setAlbumName("BA");
		
		ArtistInformation aInformation = new ArtistInformation();
		
		aInformation = getByAlbum(album);
		
		ArtistInfo[] artistInfo = aInformation.getArtistInformation();
		
		for (int i = 0; i < artistInfo.length; i++) {
			ArtistInfo ai = artistInfo[i];
			if(ai != null){
				String name = ai.getName();						// Get Disc From TrackDetail 
				String dob = ai.getDob().toString();	// Get Track From TrackDetail 
				String sex = ai.getSex();				// Get Composer From TrackDetail 
				String albumName = ai.getAlbum_name();						// Get Work From TrackDetail 
				int releaseYear = ai.getRelease_year();						// Get Title From TrackDetail 
				String recordCompany = ai.getRecord_company();	
				
				System.out.println("Returned The Folowing :" + name + dob + sex + albumName + releaseYear + recordCompany );
				
				//trackRows += String.format("%-8s%-10s%-22s%-32s%-32s\n", name,dob,sex,albumName,releaseYear,recordCompany,"\n");				
			}
		}
		
		
		/*
		SingerName singer = new SingerName();
		
		singer.setSingerName("MICK JAGGER");
		
		ArtistInformation aInformation = new ArtistInformation();
		
		aInformation = getBySinger(singer);
		
		ArtistInfo[] artistInfo = aInformation.getArtistInformation();
		
		for (int i = 0; i < artistInfo.length; i++) {
			ArtistInfo ai = artistInfo[i];
			if(ai != null){
				String name = ai.getName();						// Get Disc From TrackDetail 
				String dob = ai.getDob().toString();	// Get Track From TrackDetail 
				String sex = ai.getSex();				// Get Composer From TrackDetail 
				String albumName = ai.getAlbum_name();						// Get Work From TrackDetail 
				int releaseYear = ai.getRelease_year();						// Get Title From TrackDetail 
				String recordCompany = ai.getRecord_company();	
				
				System.out.println("Returned The Folowing :" + name + dob + sex + albumName + releaseYear + recordCompany );
				
				//trackRows += String.format("%-8s%-10s%-22s%-32s%-32s\n", name,dob,sex,albumName,releaseYear,recordCompany,"\n");				
			}
		}
		
		*/
	}
	
	
	/**
	 * Method getByArtist
	 * @param composerName
	 * 
	 * Method getByArtist() Takes Parameter composerName Which Is Passed In 
	 * From The Client. The composerName Was Set On The Client Side Before This
	 * Reference Was Passed In So Now We Can Say getComposerName(). This Method
	 * Makes A Call To getByField() Which Fetches The Track Details From The 
	 * Database. When They Details Are Returned To Here, This Method Sets Those
	 * Details In Class Track Details And Then Returns The Reference To TrackDetails
	 * So That The Client Can Then Say (get) disc, track, title etc.
	 * 
	 * 1. User The Reference To The Composer Object Passed In To Get The Composers Name
	 *    (Which Was Set In The Client).
	 *    
	 * 2. Call getByField() And Store The List Of Track Objects It Returns In A TrackDetail
	 *    Object Array
	 * 
	 * 3. Create A TrackDetails Object So That We Can Set The Returned Track Details 
	 * 
	 * 4. Set The Returned Track Details
	 * 
	 * 5. Now Return The TrackDetails Object Reference (Which Now Holds Information About
	 *    The Track Details We Just Set) So That The Client Can Use This Reference To Get
	 *    Those Details
	 */
	public ArtistInformation getBySinger(SingerName singerName) throws ErrorFaultException{
		
		String singer = singerName.getSingerName();	  							// get the composer name that was set in the client: will be partial so "il"
		ArtistInfo[] artistInfo = getByField("name", singer);   				// call getByFiled("composer" "li") make the result = to TrackDetail[] array {TD,TD,TD,TD}
		ArtistInformation artistInformationRef = new ArtistInformation();		// Create track details object  ref so we can say...td.seTrackDetails next line		
		artistInformationRef.setArtistInformation(artistInfo);			  		// Set the track details in the TrackDetails class to the returned objects "y"
		return artistInformationRef;											// so that now we can say getTrackDetails in the client and there will be 																	
	}				
	
	
	/**
	 * Method getByDisc()
	 * Method getByDisc() Takes Parameter diskNumber Which Is Passed In 
	 * From The Client. The diskNumber Was Set On The Client Side Before This
	 * Reference Was Passed In So Now We Can Say getDiscName(). This Method 
	 * Makes A Call TO getField() Which Fetches The Track Details From The 
	 * Database. When They Details Are Returned To Here, This Method Iterates
	 * Over The Track Details And Extracts The Tracks That Match The Value
	 * Entered By The User And Stores Them In A New Array. This Method Sets Those
	 * Details In Class Track Details And Then Returns The Reference To TrackDetails
	 * So That The Client Can Then Say (get) disc, track, title etc.
	 * 
	 * 1. User The Reference To The DiscNumber Object Passed In To Get The Disc Number
	 *    (Which Was Set In The Client).
	 * 
	 * 2. Call getByField() And Store The List Of Track Objects It Returns In A TrackDetail
	 *    Object Array
	 *      
	 * 3. Initialise A Temporary Track Details Array To The Size Of The Returned trackDetailsObjects
	 *    Array.
	 * 
	 * 4. Iterate Over The trackDetailsObject Array And Look For Track Detail Objects Whos 
	 *    Disk Numbers Match The Disk Number The Use Passed Into The GUI. 
	 * 
	 * 5. If There Is A Match Then Assign That Track Detail Object To The Temporary Array
	 *    Because We Have Just Found A Track The User Is Interested In
	 *    
	 * 6. Once The Loop Is Compete Copy The TrackDetail Objects From The Temp Array To The
	 *    Results Array.
	 *    
	 * 7. Create A TrackDetails Object So That We Can Set The Resultant Track Details 
	 * 
	 * 8. Now Return The TrackDetails Object Reference (Which Now Holds Information About
	 *    The Track Details We Just Set) So That The Client Can Use This Reference To Get
	 *    Those Details
	 */ 
	public ArtistInformation getByAlbum(AlbumName albumName) throws ErrorFaultException{ 
		System.out.println("IN GET ALBUM METHOD OF WEB SERVICE");
		String albumNme = albumName.getAlbumName(); 
		ArtistInfo[] artistDetailObjects = getByField("album_name", albumNme);
		
		
		
		
		int j = 0; 
		ArtistInfo[] temp = new ArtistInfo[artistDetailObjects.length];
		for(int i = 0; i < artistDetailObjects.length; i++){
			System.out.println("Album Name" + artistDetailObjects[i].getAlbum_name() + " " + " Album Param = " + albumName.getAlbumName());
			if(artistDetailObjects[i].getAlbum_name().toString().toLowerCase().trim().equals(albumName.getAlbumName().toString().toLowerCase().trim()) || 
					artistDetailObjects[i].getAlbum_name().toString().toLowerCase().trim().contains(albumName.getAlbumName().toString().toLowerCase().trim())){
				System.out.println("In If");
				temp[j] = artistDetailObjects[i];
				j++;
			}
		}
		ArtistInfo[] results = Arrays.copyOf(temp, j);
		
		ArtistInformation artistInfo = new ArtistInformation();
		artistInfo.setArtistInformation(results);
		return artistInfo;
	}
	

	
	private ArtistInfo[] getByField(String field, String value) throws ErrorFaultException {
		try {
			if (value.length() == 0)
				throw (new Exception(field + " is empty"));
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			//String databaseDesignation = "jdbc:mysql://" + databaseHost + "/" + databaseName + "?user=" + databaseUser + "&password=" + databasePassword;
			
			
			Connection connection = DriverManager.getConnection(databaseHost, databaseUser, databasePassword ); //databaseDesignation
			Statement statement = connection.createStatement();
			
			String query2 = "SELECT" +
					   " ng_singers.name," +
					   " ng_singers.dob," +
					   " ng_singers.sex," +
					  " ng_albums.album_name," +
					  " ng_albums.release_year," +
					   " ng_albums.record_company" +
					" FROM" +
					   " ng_singers" +
					   " INNER JOIN" +
					      " ng_albums" + 
					      " ON ng_singers.ng_singers_id = ng_albums.ng_singers_id" +
					      " WHERE " + field + " LIKE '%" + value + "%'";
						//" WHERE " + field + " LIKE '%" + " OR" + " album_name" + " LIKE '%" +  value + "%'";
			
			//String query = "SELECT disc, track, composer, work, title " + "FROM " + discTable + " " + "WHERE " + field
					//+ " LIKE '%" + value + "%'";
			
			ResultSet result = statement.executeQuery(query2);
			result.last();
			int resultCount = result.getRow();
			if (resultCount == 0){
				System.out.println("Noting Returned");
				throw (new Exception(field + " '" + value + "' not found"));
			}

			ArtistInfo[] artistInformation = new ArtistInfo[resultCount];
			result.beforeFirst();
			int resultIndex = 0;
			while (result.next()) {
				
				ArtistInfo info = new ArtistInfo();
				
				info.setName(result.getString(1));
				info.setDob(result.getDate(2));
				info.setSex(result.getString(3));				
				info.setAlbum_name(result.getString(4));				
				info.setRelease_year(result.getInt(5));				
				info.setRecord_company(result.getString(6));
				
				artistInformation[resultIndex++] = info;
			}
			connection.close();
			return (artistInformation);
		}
		catch (Exception exception) {
			String errorMessage = "database access error - " + exception.getMessage();
			throw (new ErrorFaultException(errorMessage, exception));
		}
	}

}
